@page "/"
@using System.Runtime.InteropServices
@rendermode InteractiveServer

<PageTitle>LOVE-ME-NOT</PageTitle>

<h1 class="titan-one title">LOVE-ME-NOT</h1>
@switch (state)
{
    case Page.UploadFile:
        <UploadFile OnLove="@LoveCalculated" />
        ; break;
    case Page.Loading:
        <Loading Progress="@progress" />
        ; break;
    case Page.Results:
        @if (results is not null)
        {
            <Results results="@results" />
        }
        else
        {
            <Error returnToHome="() => { state = Page.UploadFile; }" />
        }

; break;
}


@code {
    private double progress;
    public async Task update_progress(double new_progress)
    {
        progress = new_progress;
        await InvokeAsync(StateHasChanged);
    }

    enum Page
    {
        UploadFile,
        Loading,
        Results,
    }
    Page state = Page.UploadFile;
    LoveResults? results;
    private List<Message> parse_json = new List<Message>();

    public async void LoveCalculated((IBrowserFile file, string token) args)
    {
        Console.WriteLine("Love calculated");
        state = Page.Loading;
        await InvokeAsync(StateHasChanged);
        parse_json = await FileHandle.ParseJson(args.file, args.token);

        Console.WriteLine("Number of messages: " + parse_json.Count());
        ChatLog clog = new ChatLog(parse_json);
        results = await Task.Run(() => clog.FindStats((Func<double, Task>)update_progress));
        state = Page.Results;
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("Finished Calculating Love!!!");
    }
}

<style>
    .title {
        font-size: 100pt;
        color:
            @BlazorTest.ColorConstants.rose
        ;
    }

    body {
        background-color:
            @BlazorTest.ColorConstants.mint
        ;
        display: flex;
        justify-content: center;
        text-align: center;
    }
</style>