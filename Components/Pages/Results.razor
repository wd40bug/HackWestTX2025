@rendermode InteractiveServer
@using BlazorTest.Components.Pages.ResultsComponents;

<div class="flower-spacer"></div>
<div class="result-container">
    <div class="flower-indicator"></div>
    <div class="result-top">
        <div class="love-percentage">
            <h1 class="titan-one">@Math.Round(results.Love_percentage)%</h1>
        </div>
        <div class="flower-space"></div>
        <div class="flavor-text">
            <h1 class="titan-one">@results.Meaning.message</h1>
        </div>
    </div>
    <div class="result-item-container">
        @foreach (var kind in order_results())
        {
            <div class="result-item">
                @switch (kind)
                {
                    case ResultKind.responseTime:
                        <ResponseTime responseTime="results.AverageResponseTime.Value" />
                        break;
                    case ResultKind.heartCount:
                        <HeartCount heartCount="results.HeartCount.Value" />
                        break;
                    case ResultKind.averageMessageCount:
                        <AverageMessagesPerDay averageMessagesPerDay="results.AverageMessagesPerDay.Value" />
                        break;
                    case ResultKind.powerWords:
                        <PowerWords powerWordCount="results.PowerWordCount.Value"/>
                        break;
                    case ResultKind.powerPhrase:
                        <PowerPhrases powerPhraseCount="results.PowerPhraseCount.Value"/>
                        break;
                    case ResultKind.powerAbbrev:
                        <PowerAbbrev powerAbbrevCount="results.PowerAbbrevCount.Value"/>
                        break;
                }
            </div>
        }
    </div>
</div>


<style>
    .result-container {
        position: relative;
        background-color:
            @BlazorTest.ColorConstants.purple
        ;
        border-radius: 20px;
    }

    .result-top {
        height: 250px;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        margin: 10px;
        padding: 20px;
        gap: 20px;
    }

    .result-item {
        border-radius: 20px;
        height: 120px;
        background-color:
            @BlazorTest.ColorConstants.light_pink
        ;
        padding: 10px 10px 10px 10px;
    }

    .love-percentage {
        background-color:
            @BlazorTest.ColorConstants.light_pink
        ;
        height: 100%;
        border-radius: 20px;
        align-items: center;
        justify-content: center;
        text-align: center;
        display: flex;
        color:
            @results.Meaning.color
        ;

    }

    .flower-spacer {
        height: 200px;
    }

    .flower-indicator {
        background-color:
            @BlazorTest.ColorConstants.light_pink
        ;
        height: 400px;
        width: 400px;
        position: absolute;
        border-radius: 200px;
        top: 0%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 100;
    }

    .flower-space {
        width: 100%;
    }

    .love-percentage>h1 {
        font-size: 90pt;
        -webkit-text-stroke: 2px
            @BlazorTest.ColorConstants.lichoriche
        ;
    }

    .flavor-text {
        background-color:
            @BlazorTest.ColorConstants.light_pink
        ;
        height: 100%;
        border-radius: 20px;
        align-items: center;
        justify-content: center;
        text-align: center;
        display: flex;
        color:
            @results.Meaning.color
        ;

    }

    .flavor-text>h1 {
        font-size: 50pt;
        -webkit-text-stroke: 2px
            @BlazorTest.ColorConstants.lichoriche
        ;
    }

    .result-item-container {

        display: grid;
        grid-template-columns: 1fr 1fr;
        column-gap: 10px;
        padding: 20px;
    }

    .return {
        width: 50%;
        height: 50px;
        background-color:
            @BlazorTest.ColorConstants.hunyadi
        ;
        border: 0px;
        border-radius: 10px;
    }
</style>


@code {
    enum ResultKind
    {
        responseTime,
        heartCount,
        averageMessageCount,
        powerWords,
        powerPhrase,
        powerAbbrev
    }

    [Parameter]
    [EditorRequired]
    public LoveResults results { get; set; }
    @* 
    [Parameter]
    [EditorRequired]
    public EventCallback returnToHome { get; set; } *@

    private List<ResultKind> order_results()
    {
        var ret = new List<(double, ResultKind)>(1);
        ret.Add((results.AverageResponseTime.Weight, ResultKind.responseTime));
        ret.Add((results.HeartCount.Weight, ResultKind.heartCount));
        ret.Add((results.AverageMessagesPerDay.Weight, ResultKind.averageMessageCount));
        ret.Add((results.PowerWordCount.Weight, ResultKind.powerWords));
        ret.Add((results.PowerPhraseCount.Weight, ResultKind.powerPhrase));
        ret.Add((results.PowerAbbrevCount.Weight, ResultKind.powerAbbrev));
        return ret.OrderByDescending(i => i.Item1).Select(i => i.Item2).ToList();
    }


}
